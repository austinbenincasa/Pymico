# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import core.rpc.minionRPC_pb2 as minionRPC__pb2


class MinionRPCStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.restart = channel.unary_unary(
        '/MinionRPC.MinionRPC/restart',
        request_serializer=minionRPC__pb2.Empty.SerializeToString,
        response_deserializer=minionRPC__pb2.restartResp.FromString,
        )
    self.shutdown = channel.unary_unary(
        '/MinionRPC.MinionRPC/shutdown',
        request_serializer=minionRPC__pb2.Empty.SerializeToString,
        response_deserializer=minionRPC__pb2.shutdownResp.FromString,
        )
    self.checkAlive = channel.unary_unary(
        '/MinionRPC.MinionRPC/checkAlive',
        request_serializer=minionRPC__pb2.Empty.SerializeToString,
        response_deserializer=minionRPC__pb2.aliveResp.FromString,
        )
    self.getPlugins = channel.unary_unary(
        '/MinionRPC.MinionRPC/getPlugins',
        request_serializer=minionRPC__pb2.Empty.SerializeToString,
        response_deserializer=minionRPC__pb2.pluginsResp.FromString,
        )
    self.getPrompt = channel.unary_unary(
        '/MinionRPC.MinionRPC/getPrompt',
        request_serializer=minionRPC__pb2.Empty.SerializeToString,
        response_deserializer=minionRPC__pb2.promptResp.FromString,
        )
    self.loadPlugin = channel.unary_unary(
        '/MinionRPC.MinionRPC/loadPlugin',
        request_serializer=minionRPC__pb2.loadReq.SerializeToString,
        response_deserializer=minionRPC__pb2.loadResp.FromString,
        )
    self.runPluginFunction = channel.unary_unary(
        '/MinionRPC.MinionRPC/runPluginFunction',
        request_serializer=minionRPC__pb2.functionReq.SerializeToString,
        response_deserializer=minionRPC__pb2.functionResp.FromString,
        )
    self.runShellCommand = channel.unary_stream(
        '/MinionRPC.MinionRPC/runShellCommand',
        request_serializer=minionRPC__pb2.commandReq.SerializeToString,
        response_deserializer=minionRPC__pb2.commandResp.FromString,
        )


class MinionRPCServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def restart(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def shutdown(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def checkAlive(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getPlugins(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getPrompt(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def loadPlugin(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def runPluginFunction(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def runShellCommand(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_MinionRPCServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'restart': grpc.unary_unary_rpc_method_handler(
          servicer.restart,
          request_deserializer=minionRPC__pb2.Empty.FromString,
          response_serializer=minionRPC__pb2.restartResp.SerializeToString,
      ),
      'shutdown': grpc.unary_unary_rpc_method_handler(
          servicer.shutdown,
          request_deserializer=minionRPC__pb2.Empty.FromString,
          response_serializer=minionRPC__pb2.shutdownResp.SerializeToString,
      ),
      'checkAlive': grpc.unary_unary_rpc_method_handler(
          servicer.checkAlive,
          request_deserializer=minionRPC__pb2.Empty.FromString,
          response_serializer=minionRPC__pb2.aliveResp.SerializeToString,
      ),
      'getPlugins': grpc.unary_unary_rpc_method_handler(
          servicer.getPlugins,
          request_deserializer=minionRPC__pb2.Empty.FromString,
          response_serializer=minionRPC__pb2.pluginsResp.SerializeToString,
      ),
      'getPrompt': grpc.unary_unary_rpc_method_handler(
          servicer.getPrompt,
          request_deserializer=minionRPC__pb2.Empty.FromString,
          response_serializer=minionRPC__pb2.promptResp.SerializeToString,
      ),
      'loadPlugin': grpc.unary_unary_rpc_method_handler(
          servicer.loadPlugin,
          request_deserializer=minionRPC__pb2.loadReq.FromString,
          response_serializer=minionRPC__pb2.loadResp.SerializeToString,
      ),
      'runPluginFunction': grpc.unary_unary_rpc_method_handler(
          servicer.runPluginFunction,
          request_deserializer=minionRPC__pb2.functionReq.FromString,
          response_serializer=minionRPC__pb2.functionResp.SerializeToString,
      ),
      'runShellCommand': grpc.unary_stream_rpc_method_handler(
          servicer.runShellCommand,
          request_deserializer=minionRPC__pb2.commandReq.FromString,
          response_serializer=minionRPC__pb2.commandResp.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'MinionRPC.MinionRPC', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
